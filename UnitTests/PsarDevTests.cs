using SquidEyes.Trading.Context;
using SquidEyes.Trading.FxData;
using SquidEyes.Trading.Indicators;
using System;
using System.Collections.Generic;
using Xunit;
using FluentAssertions;
using SquidEyes.Basics;

namespace SquidEyes.UnitTests
{
    public class PsarDevTests
    {
        private class Baseline
        {
            public ICandle? Candle { get; init; }
            public double Value { get; init; }
        }

        [Fact]
        public void IndicatorMatchesBaseline()
        {
            var baselines = GetBaselines();

            var pair = Known.Pairs[Symbol.EURUSD];

            var indicator = new ParabolicSarIndicator(pair,
                RateToUse.Close, new MinMaxStep(0.02, 0.2, 0.02, 0.02));

            foreach (var baseline in baselines)
            {
                var result = indicator.AddAndCalc(baseline.Candle!);

                Math.Round(result.Value, 8)
                    .Should().Be(Math.Round(baseline.Value, 8));
            }
        }

        private static List<Baseline> GetBaselines()
        {
            var baselines = new List<Baseline>();

            void Add(int id, int open, int high, int low, int close, double value)
            {
                TickOn openOn = new DateTime(2022, 3, 2, 18, 5, 0).AddMinutes(id * 5);
                TickOn closeOn = openOn.Value.AddMinutes(5).AddMilliseconds(-1);

                baselines.Add(new Baseline()
                {
                    Candle = new Candle(openOn, closeOn, open, high, low, close),
                    Value = value
                });
            }

            Add(00, 111215, 111235, 111215, 111230, 0);
            Add(01, 111235, 111255, 111205, 111240, 0);
            Add(02, 111240, 111250, 111210, 111210, 0);
            Add(03, 111215, 111225, 111180, 111180, 1.111815);
            Add(04, 111180, 111180, 111150, 111165, 1.1125);
            Add(05, 111170, 111175, 111125, 111130, 1.11246);
            Add(06, 111130, 111160, 111130, 111155, 1.1123874);
            Add(07, 111155, 111170, 111150, 111160, 1.112319156);
            Add(08, 111160, 111170, 111150, 111155, 1.11225500664);
            Add(09, 111155, 111190, 111145, 111190, 1.1121947062416);
            Add(10, 111190, 111200, 111180, 111180, 1.1121380238671);
            Add(11, 111180, 111180, 111135, 111145, 1.11208474243508);
            Add(12, 111145, 111170, 111140, 111160, 1.11203465788897);
            Add(13, 111160, 111170, 111120, 111140, 1.11198757841563);
            Add(14, 111140, 111175, 111140, 111150, 1.11192457214238);
            Add(15, 111155, 111160, 111130, 111155, 1.11186660637099);
            Add(16, 111155, 111175, 111105, 111105, 1.11181327786131);
            Add(17, 111105, 111120, 111075, 111075, 1.11175);
            Add(18, 111080, 111085, 111035, 111040, 1.11175);
            Add(19, 111040, 111075, 111030, 111075, 1.111554);
            Add(20, 111075, 111075, 111055, 111070, 1.11135336);
            Add(21, 111065, 111070, 111050, 111065, 1.1111848224);
            Add(22, 111065, 111075, 111055, 111060, 1.111043250816);
            Add(23, 111060, 111060, 111035, 111045, 1.11092433068544);
            Add(24, 111045, 111065, 111020, 111035, 1.11082443777577);
            Add(25, 111035, 111040, 110960, 111010, 1.11071203897613);
            Add(26, 111005, 111015, 110975, 110980, 1.11065);
            Add(27, 110980, 111020, 110975, 111015, 1.11044);
            Add(28, 111015, 111025, 110990, 111015, 1.110272);
            Add(29, 111015, 111020, 111000, 111010, 1.11025);
            Add(30, 111010, 111050, 111010, 111045, 1.1096);
            Add(31, 111045, 111050, 111000, 111000, 1.109618);
            Add(32, 111000, 111030, 111000, 111025, 1.10963564);
            Add(33, 111020, 111020, 110980, 110990, 1.1096529272);
            Add(34, 110990, 111005, 110980, 110995, 1.109669868656);
            Add(35, 110995, 111040, 110990, 111000, 1.10968647128288);
            Add(36, 111000, 111030, 110945, 110945, 1.1105);
            Add(37, 110945, 110970, 110920, 110950, 1.110479);
            Add(38, 110950, 110975, 110925, 110975, 1.11042784);
            Add(39, 110975, 110975, 110940, 110965, 1.1103787264);
            Add(40, 110965, 110995, 110965, 110995, 1.110331577344);
            Add(41, 110995, 111025, 110990, 111025, 1.11028631425024);
            Add(42, 111025, 111080, 111020, 111055, 1.1092);
            Add(43, 111055, 111080, 111025, 111050, 1.109232);
            Add(44, 111050, 111080, 111045, 111075, 1.10926336);
            Add(45, 111075, 111090, 111055, 111075, 1.1092940928);
            Add(46, 111075, 111090, 111065, 111070, 1.109358329088);
            Add(47, 111070, 111090, 111065, 111080, 1.10941999592448);
            Add(48, 111080, 111090, 111065, 111080, 1.1094791960875);
            Add(49, 111080, 111080, 111040, 111040, 1.109536028244);
            Add(50, 111040, 111045, 111015, 111025, 1.10959058711424);
            Add(51, 111025, 111030, 110995, 111000, 1.10964296362967);
            Add(52, 111000, 111025, 111000, 111020, 1.10969324508448);
            Add(53, 111020, 111030, 110990, 110990, 1.1097415152811);
            Add(54, 110990, 111005, 110990, 110995, 1.10978785466986);
            Add(55, 110995, 111005, 110980, 111005, 1.1109);
            Add(56, 111005, 111005, 110985, 110990, 1.110878);
            Add(57, 110990, 110995, 110980, 110990, 1.11085644);
            Add(58, 110990, 111000, 110980, 110995, 1.1108353112);
            Add(59, 110995, 111020, 110995, 111020, 1.110814604976);
            Add(60, 111020, 111055, 111020, 111055, 1.11079431287648);
            Add(61, 111055, 111055, 111030, 111040, 1.11077442661895);
            Add(62, 111040, 111045, 111025, 111035, 1.11075493808657);
            Add(63, 111035, 111045, 111025, 111035, 1.11073583932484);
            Add(64, 111040, 111045, 111015, 111020, 1.11071712253834);
            Add(65, 111020, 111025, 111010, 111020, 1.11069878008758);
            Add(66, 111020, 111025, 110995, 111000, 1.11068080448582);
            Add(67, 110995, 111020, 110995, 111000, 1.11066318839611);
            Add(68, 111000, 111020, 110995, 111010, 1.11064592462819);
            Add(69, 111010, 111015, 111000, 111010, 1.11062900613562);
            Add(70, 111005, 111025, 111005, 111015, 1.11061242601291);
            Add(71, 111010, 111015, 110995, 111005, 1.11059617749265);
            Add(72, 111000, 111020, 111000, 111015, 1.1105802539428);
            Add(73, 111010, 111050, 111010, 111045, 1.11056464886394);
            Add(74, 111045, 111065, 111045, 111060, 1.1098);
            Add(75, 111060, 111060, 111050, 111060, 1.109817);
            Add(76, 111060, 111070, 111055, 111060, 1.10983366);
            Add(77, 111060, 111060, 111035, 111045, 1.1098683136);
            Add(78, 111045, 111055, 111040, 111050, 1.109901581056);
            Add(79, 111050, 111050, 111035, 111045, 1.10993351781376);
            Add(80, 111040, 111055, 111040, 111050, 1.10996417710121);
            Add(81, 111050, 111060, 111050, 111055, 1.10999361001716);
            Add(82, 111050, 111065, 111045, 111045, 1.11002186561647);
            Add(83, 111045, 111060, 111035, 111040, 1.11004899099182);
            Add(84, 111040, 111060, 111035, 111060, 1.11007503135214);
            Add(85, 111060, 111065, 110970, 110985, 1.1107);
            Add(86, 110985, 111020, 110975, 111015, 1.11068);
            Add(87, 111015, 111035, 111010, 111010, 1.1106604);
            Add(88, 111010, 111020, 110980, 110990, 1.110641192);
            Add(89, 110985, 111005, 110980, 110995, 1.11062236816);
            Add(90, 110995, 110995, 110960, 110995, 1.1106039207968);
            Add(91, 110995, 111025, 110985, 111020, 1.11056376396493);
            Add(92, 111020, 111045, 111005, 111020, 1.11052521340633);
            Add(93, 111020, 111040, 111015, 111035, 1.11048820487008);
            Add(94, 111035, 111055, 111020, 111045, 1.1096);
            Add(95, 111045, 111085, 111045, 111065, 1.109619);
            Add(96, 111065, 111080, 111050, 111055, 1.10966824);
            Add(97, 111055, 111080, 111045, 111070, 1.1097155104);
            Add(98, 111070, 111075, 111025, 111025, 1.109760889984);
            Add(99, 111025, 111025, 110970, 110975, 1.11085);

            return baselines;
        }
    }
}
