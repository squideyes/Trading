// ********************************************************
// Copyright (C) 2021 Louis S. Berman (louis@squideyes.com)
//
// This file is part of SquidEyes.Trading
//
// The use of this source code is licensed under the terms
// of the MIT License (https://opensource.org/licenses/MIT)
// ********************************************************

using FluentAssertions;
using SquidEyes.Trading.Context;
using SquidEyes.Trading.Indicators;
using SquidEyes.UnitTests.Testing;
using Xunit;

namespace SquidEyes.UnitTests.Indicators
{
    public class CciIndicatorTests
    {
        [Fact]
        public void StochasticsIndicatorBaseline()
        {
            var results = new double[]
            {
                0.00000000, -66.66666667, -100.00000000, -96.23430962, 
                -69.88536155, -76.86567164, -69.67592593, -43.69114878, 
                -42.51069900, -47.81309427, -49.77493485, -84.71454880, 
                -64.53900709, 41.51329243, 68.09145129, 138.83754364, 
                110.38961039, 136.97688944, 121.75856930, 67.60270411,
                82.39338275, 63.71266623, -20.02583979, -60.56701031, 
                -17.47753671, 81.65986612, 41.13941386, 48.01786711, 
                72.19402143, 106.19063966, 95.03109340, 70.78052497, 
                89.82942771, 94.76142809, 25.63413104, -75.33670034, 
                -51.45603619, -42.76234947, -96.21746582, -83.70702541, 
                -59.38069217, -55.41490858, -81.49575394, -124.82176154,
                -107.65819794, -96.84803663, -78.65697753, -61.32028363,
                -23.24764714, -16.16737993, -25.10691130, -31.29990418, 
                -1.20072043, 201.62748644, 245.51338629, 181.13491169,
                145.96325636, 152.97005400, 91.64420485, 58.47044090,
                122.34125136, 129.38480522, 123.39005672, 144.48370632,
                168.01651580, 170.16229713, 157.86647575, 83.48359178,
                35.57790817, 47.96488170, 33.95703396, -28.72628726,
                -100.78285950, -85.19885199, -82.79441118, -85.89292692,
                -114.21072366, -149.33605720, -143.01994302, -133.71589109,
                -126.53598989, -122.63496781, -98.25764067, -58.73715125,
                -30.60480933, -42.30699693, -35.20420514, -17.26869455,
                -0.71994240, 12.15932914, -38.40579710, -50.75063106, 
                -59.86394558, -144.66936572, -156.53333333, -105.43933054,
                -92.71708684, -160.27312229, -234.61231015, -242.54973609,
                -176.24521073, -99.25826887, -66.42335766, -104.56835157, 
                -108.13823857, -41.22245913, -16.06714628, -16.73477330, 
                53.86498776, 68.77113867, 53.08185110, 29.87622706,
                133.06143258, 115.26365233, 108.84828737, 118.05094131, 
                153.68009175, 144.29469901, 139.67176005, 113.58239212,
                110.59661621, 115.75282855, 62.00449651, 91.24133585, 
                174.99922126, 134.00797301, 84.77217082, 114.06234339,
                141.71676358, 191.93047796, 220.76788831, 277.07041027,
                258.25825826, 181.91191633, 137.12287295, 122.89652384, 
                86.57300050, 90.70412764, 103.08043413, 131.68481994, 
                154.47870778, 150.89525318, 130.06823134, 152.04108340,
                146.69299796, 110.07500507, 117.22527114, 120.31709500,
                127.80327713, 110.92008914, 74.54824298, 86.24229979, 
                84.82751389, 77.91283399, 79.21834776, 72.74945422,
                87.79109422, 142.64835650, 161.54309825, 122.21170296,
                91.45413870, 118.96007428, 156.99208443, 111.08738970,
                83.42088674, 76.09090249, 103.95913155, 85.52692343, 
                35.98399033, -24.69718421, -61.66762556, -90.75043630,
                -82.60258384, -78.17364234, -80.97489825, -107.84660767,
                -91.78307503, -67.56695926, -59.68297726, -44.28568157, 
                -18.19008640, -42.58103718, -130.25828386, -170.22825352,
                -113.95916556, -77.74592312, -45.78447795, 103.43061956,
                142.97341291, 47.47248648, 59.98899284, 41.71230376, 
                66.59619450, -22.81797675, -87.19566448, -65.04065041,
                -108.75811429, -109.87849974, -88.36329234, -171.88755020,
                -206.49529250, -210.09790925, -213.44541041, -197.28553802, 
                -153.23464912, -106.63495367, -102.99986239, -91.51905529,
                -102.98193105, -64.37401663, -26.11604734, -57.00609225, 
                -84.01354878, -78.51489336, -30.04466098, 14.31613819,
                -13.05185908, -71.38251044, -160.58492537, -63.00741949,
                7.34767025, -27.61795167, 66.99981492, 60.91794159, 
                41.75423848, 48.60820670, 22.67699115, 56.30387931,
                37.58073987, 191.94991844, 281.14715562, 287.05579083,
                214.67955603, 144.50818991, 97.29811779, 94.05599228,
                72.64120144, 58.81970200, 54.03364229, 88.69140965, 
                91.48408289, 72.59374077, 74.17715158, 67.50261233, 
                101.43714246, 110.89885637, 96.37867123, 102.48406815,
                144.69802826, 134.86005089, 17.93478261, -82.56410256,
                -105.97673486, -73.38740827, -104.01998637, -129.23877867,
                -125.93184239, -87.45874588, -140.57114722, -158.24105280,
                -141.92288921, -106.70163572, -98.98692373, -46.48029640,
                -35.83262331, -45.74659471, -62.97285269, -21.22582266, 
                -22.21964154, -8.23045268, -4.32098765, -23.80952381, 
                3.52733686, 1.72022832, 181.88736682, 220.77569840, 
                195.18827215, 193.03797468, 172.92592094, 124.84548826, 
                107.77973741, 133.07098091, 132.44156477, 120.65359477,
                129.36144210, 175.29541784, 157.70549377, 128.55980472
            };

            var indicator = new CciIndicator(
                20, Known.Pairs[Symbol.EURUSD], RateToUse.Close);

            var candles = IndicatorData.GetCandles();

            for (var i = 0; i < candles.Count; i++)
            {
                indicator.AddAndCalc(candles[i]).Value
                    .Should().BeApproximately(results[i], 8);
            }
        }
    }
}