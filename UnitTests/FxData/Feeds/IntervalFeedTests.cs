// ********************************************************
// Copyright (C) 2021 Louis S. Berman (louis@squideyes.com) 
// 
// This file is part of SquidEyes.Trading
// 
// The use of this source code is licensed under the terms 
// of the MIT License (https://opensource.org/licenses/MIT)
// ********************************************************

using FluentAssertions;
using SquidEyes.Basics;
using SquidEyes.Trading.Context;
using SquidEyes.Trading.FxData;
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;
using static SquidEyes.UnitTests.Properties.TestData;

namespace SquidEyes.UnitTests.FxData;

public class IntervalFeedTests
{
    //[Fact]
    //public void ConstructWithGoodArgs()
    //{
    //    var pair = Known.Pairs[Symbol.EURUSD];
    //    var baseDate = new DateOnly(2021, 10, 10);
    //    var session = new Session(Extent.EstDay, baseDate);

    //    var feed = new IntervalFeed(pair, session, 15);

    //    feed.Pair.Should().Be(pair);
    //    feed.Session.Should().Be(session);
    //    feed.Interval.Should().Be(TimeSpan.FromSeconds(15));
    //}

    //////////////////////////

    //[Fact]
    //public void RaiseOnCandleAndResetDoes()
    //{
    //    var (ticks, feed) = GetTickSetAndFeed(60 * 7);

    //    int count = 0;

    //    Candle lastCandle = null!;

    //    feed.OnCandle += (s, e) =>
    //    {
    //        count++;

    //        lastCandle = e.Candle;
    //    };

    //    foreach (var tick in ticks)
    //        feed.HandleTick(tick);

    //    count.Should().Be(206);

    //    lastCandle.OpenOn.Should().Be(new DateTime(2020, 1, 3, 16, 49, 0));
    //    lastCandle.CloseOn.Should().Be(new DateTime(2020, 1, 3, 16, 55, 59, 999));

    //    feed.RaiseOnCandleAndReset(ticks.Last());

    //    lastCandle.OpenOn.Should().Be(new DateTime(2020, 1, 3, 16, 56, 0));
    //    lastCandle.CloseOn.Should().Be(new DateTime(2020, 1, 3, 16, 59, 59, 999));

    //    count.Should().Be(207);
    //}

    //////////////////////////

    //[Theory]
    //[InlineData(false, true, 15, ErrorType.ArgumentNullException)]
    //[InlineData(true, false, 15, ErrorType.ArgumentNullException)]
    //[InlineData(true, true, 0, ErrorType.ArgumentOutOfRangeException)]
    //public void ConstructWithBadArgs(
    //    bool goodPair, bool goodSession, int seconds, ErrorType errorType)
    //{
    //    Pair pair = goodPair ? Known.Pairs[Symbol.EURUSD] : null!;

    //    Session session;

    //    if (goodSession)
    //        session = new Session(Extent.EstDay, new DateOnly(2021, 10, 10));
    //    else
    //        session = null!;

    //    FluentActions.Invoking(() => new IntervalFeed(pair, session, seconds))
    //        .Should().Throw<Exception>().Where(e => e.GetType() == errorType.ToType());
    //}

    //////////////////////////

    //[Fact]
    //public void IntervalFeedShouldCreateExpectedCandles()
    //{
    //    var pair = Known.Pairs[Symbol.EURUSD];

    //    var baseDate = new DateOnly(2020, 1, 2);

    //    var session = new Session(Extent.EstDay, baseDate);

    //    var feed = new IntervalFeed(pair, session, 300);

    //    var actual = new List<Candle>();

    //    var expected = GetExpectedCandles();

    //    feed.OnCandle += (s, e) => actual.Add(e.Candle);

    //    var tickSet = new TickSet(Source.Dukascopy, pair, session.Date);

    //    using var stream = DC_EURUSD_20200102_EST_CSV.ToStream();

    //    tickSet.LoadFromStream(stream, SaveAs.CSV);

    //    foreach (var tick in tickSet)
    //        feed.HandleTick(tick);

    //    var sb = new StringBuilder();

    //    for (int i = 0; i < actual.Count; i++)
    //        actual[i].Should().Be(expected[i]);
    //}

    //////////////////////////

    //private static List<Candle> GetExpectedCandles()
    //{
    //    var candles = new List<Candle>();

    //    //void Add(int ordinal, float open, float high, float low, float close)
    //    //{
    //    //    var minValue = new DateTime(2020, 1, 2, 17, 0, 0);

    //    //    var openOn = minValue.AddMinutes(5 * ordinal);
    //    //    var closeOn = openOn.AddMinutes(5).AddMilliseconds(-1);

    //    //    candles.Add(new Candle(openOn, closeOn, open, high, low, close));
    //    //}

    //    //Add(0, 1.11725f, 1.11726f, 1.11724f, 1.11724f);
    //    //Add(1, 1.11725f, 1.11732f, 1.11705f, 1.11724f);
    //    //Add(2, 1.11722f, 1.11726f, 1.11711f, 1.11726f);
    //    //Add(3, 1.11726f, 1.11726f, 1.11700f, 1.11720f);
    //    //Add(4, 1.11723f, 1.11723f, 1.11720f, 1.11720f);
    //    //Add(5, 1.11721f, 1.11725f, 1.11720f, 1.11723f);
    //    //Add(6, 1.11723f, 1.11733f, 1.11721f, 1.11731f);
    //    //Add(7, 1.11732f, 1.11732f, 1.11722f, 1.11724f);
    //    //Add(8, 1.11725f, 1.11727f, 1.11723f, 1.11724f);
    //    //Add(9, 1.11725f, 1.11725f, 1.11716f, 1.11718f);
    //    //Add(10, 1.11717f, 1.11719f, 1.11715f, 1.11718f);
    //    //Add(11, 1.11717f, 1.11719f, 1.11714f, 1.11718f);
    //    //Add(12, 1.11717f, 1.11729f, 1.11717f, 1.11728f);
    //    //Add(13, 1.11728f, 1.11734f, 1.11728f, 1.11730f);
    //    //Add(14, 1.11730f, 1.11731f, 1.11724f, 1.11729f);
    //    //Add(15, 1.11728f, 1.11734f, 1.11728f, 1.11732f);
    //    //Add(16, 1.11731f, 1.11735f, 1.11728f, 1.11730f);
    //    //Add(17, 1.11731f, 1.11736f, 1.11724f, 1.11730f);
    //    //Add(18, 1.11731f, 1.11735f, 1.11724f, 1.11726f);
    //    //Add(19, 1.11725f, 1.11726f, 1.11707f, 1.11708f);
    //    //Add(20, 1.11708f, 1.11710f, 1.11704f, 1.11709f);
    //    //Add(21, 1.11708f, 1.11709f, 1.11702f, 1.11704f);
    //    //Add(22, 1.11704f, 1.11709f, 1.11704f, 1.11709f);
    //    //Add(23, 1.11708f, 1.11710f, 1.11708f, 1.11710f);
    //    //Add(24, 1.11709f, 1.11710f, 1.11699f, 1.11705f);
    //    //Add(25, 1.11704f, 1.11720f, 1.11699f, 1.11720f);
    //    //Add(26, 1.11723f, 1.11738f, 1.11718f, 1.11731f);
    //    //Add(27, 1.11730f, 1.11732f, 1.11720f, 1.11720f);
    //    //Add(28, 1.11720f, 1.11726f, 1.11716f, 1.11722f);
    //    //Add(29, 1.11722f, 1.11728f, 1.11722f, 1.11726f);
    //    //Add(30, 1.11726f, 1.11730f, 1.11724f, 1.11730f);
    //    //Add(31, 1.11730f, 1.11731f, 1.11726f, 1.11726f);
    //    //Add(32, 1.11727f, 1.11728f, 1.11725f, 1.11726f);
    //    //Add(33, 1.11727f, 1.11737f, 1.11726f, 1.11736f);
    //    //Add(34, 1.11738f, 1.11748f, 1.11738f, 1.11746f);
    //    //Add(35, 1.11746f, 1.11761f, 1.11746f, 1.11756f);
    //    //Add(36, 1.11754f, 1.11757f, 1.11746f, 1.11756f);
    //    //Add(37, 1.11756f, 1.11766f, 1.11756f, 1.11766f);
    //    //Add(38, 1.11765f, 1.11780f, 1.11759f, 1.11776f);
    //    //Add(39, 1.11775f, 1.11786f, 1.11770f, 1.11781f);
    //    //Add(40, 1.11782f, 1.11783f, 1.11764f, 1.11769f);
    //    //Add(41, 1.11768f, 1.11775f, 1.11760f, 1.11760f);
    //    //Add(42, 1.11760f, 1.11760f, 1.11744f, 1.11754f);
    //    //Add(43, 1.11755f, 1.11756f, 1.11739f, 1.11740f);
    //    //Add(44, 1.11741f, 1.11749f, 1.11730f, 1.11731f);
    //    //Add(45, 1.11731f, 1.11746f, 1.11723f, 1.11744f);
    //    //Add(46, 1.11745f, 1.11768f, 1.11743f, 1.11767f);
    //    //Add(47, 1.11766f, 1.11770f, 1.11734f, 1.11736f);
    //    //Add(48, 1.11736f, 1.11763f, 1.11734f, 1.11756f);
    //    //Add(49, 1.11756f, 1.11759f, 1.11742f, 1.11750f);
    //    //Add(50, 1.11749f, 1.11767f, 1.11749f, 1.11757f);
    //    //Add(51, 1.11757f, 1.11772f, 1.11756f, 1.11758f);
    //    //Add(52, 1.11758f, 1.11762f, 1.11742f, 1.11746f);
    //    //Add(53, 1.11746f, 1.11765f, 1.11746f, 1.11764f);
    //    //Add(54, 1.11765f, 1.11775f, 1.11756f, 1.11761f);
    //    //Add(55, 1.11762f, 1.11772f, 1.11756f, 1.11759f);
    //    //Add(56, 1.11759f, 1.11771f, 1.11752f, 1.11768f);
    //    //Add(57, 1.11768f, 1.11772f, 1.11740f, 1.11740f);
    //    //Add(58, 1.11740f, 1.11751f, 1.11737f, 1.11745f);
    //    //Add(59, 1.11746f, 1.11746f, 1.11719f, 1.11726f);
    //    //Add(60, 1.11726f, 1.11732f, 1.11715f, 1.11716f);
    //    //Add(61, 1.11715f, 1.11734f, 1.11714f, 1.11730f);
    //    //Add(62, 1.11730f, 1.11732f, 1.11717f, 1.11731f);
    //    //Add(63, 1.11731f, 1.11733f, 1.11708f, 1.11730f);
    //    //Add(64, 1.11730f, 1.11730f, 1.11696f, 1.11704f);
    //    //Add(65, 1.11705f, 1.11719f, 1.11705f, 1.11719f);
    //    //Add(66, 1.11720f, 1.11726f, 1.11714f, 1.11714f);
    //    //Add(67, 1.11715f, 1.11717f, 1.11714f, 1.11716f);
    //    //Add(68, 1.11716f, 1.11724f, 1.11714f, 1.11720f);
    //    //Add(69, 1.11720f, 1.11733f, 1.11720f, 1.11725f);
    //    //Add(70, 1.11726f, 1.11734f, 1.11725f, 1.11730f);
    //    //Add(71, 1.11730f, 1.11738f, 1.11718f, 1.11722f);
    //    //Add(72, 1.11722f, 1.11746f, 1.11722f, 1.11741f);
    //    //Add(73, 1.11741f, 1.11750f, 1.11735f, 1.11740f);
    //    //Add(74, 1.11740f, 1.11746f, 1.11736f, 1.11746f);
    //    //Add(75, 1.11746f, 1.11746f, 1.11735f, 1.11738f);
    //    //Add(76, 1.11738f, 1.11739f, 1.11735f, 1.11736f);
    //    //Add(77, 1.11736f, 1.11740f, 1.11735f, 1.11736f);
    //    //Add(78, 1.11738f, 1.11744f, 1.11738f, 1.11741f);
    //    //Add(79, 1.11741f, 1.11742f, 1.11726f, 1.11729f);
    //    //Add(80, 1.11730f, 1.11730f, 1.11705f, 1.11718f);
    //    //Add(81, 1.11719f, 1.11720f, 1.11698f, 1.11704f);
    //    //Add(82, 1.11704f, 1.11707f, 1.11698f, 1.11704f);
    //    //Add(83, 1.11702f, 1.11704f, 1.11686f, 1.11702f);
    //    //Add(84, 1.11701f, 1.11706f, 1.11700f, 1.11700f);
    //    //Add(85, 1.11700f, 1.11702f, 1.11689f, 1.11690f);
    //    //Add(86, 1.11689f, 1.11692f, 1.11669f, 1.11676f);
    //    //Add(87, 1.11676f, 1.11676f, 1.11658f, 1.11658f);
    //    //Add(88, 1.11658f, 1.11664f, 1.11653f, 1.11660f);
    //    //Add(89, 1.11659f, 1.11666f, 1.11644f, 1.11664f);
    //    //Add(90, 1.11665f, 1.11689f, 1.11658f, 1.11689f);
    //    //Add(91, 1.11690f, 1.11700f, 1.11673f, 1.11680f);
    //    //Add(92, 1.11682f, 1.11701f, 1.11682f, 1.11690f);
    //    //Add(93, 1.11691f, 1.11700f, 1.11690f, 1.11696f);
    //    //Add(94, 1.11696f, 1.11700f, 1.11692f, 1.11694f);
    //    //Add(95, 1.11695f, 1.11702f, 1.11664f, 1.11664f);
    //    //Add(96, 1.11664f, 1.11668f, 1.11640f, 1.11656f);
    //    //Add(97, 1.11656f, 1.11666f, 1.11645f, 1.11654f);
    //    //Add(98, 1.11655f, 1.11663f, 1.11650f, 1.11654f);
    //    //Add(99, 1.11654f, 1.11666f, 1.11644f, 1.11666f);
    //    //Add(100, 1.11666f, 1.11676f, 1.11659f, 1.11666f);
    //    //Add(101, 1.11665f, 1.11684f, 1.11664f, 1.11676f);
    //    //Add(102, 1.11676f, 1.11681f, 1.11674f, 1.11676f);
    //    //Add(103, 1.11675f, 1.11689f, 1.11673f, 1.11689f);
    //    //Add(104, 1.11689f, 1.11694f, 1.11679f, 1.11686f);
    //    //Add(105, 1.11687f, 1.11688f, 1.11681f, 1.11684f);
    //    //Add(106, 1.11684f, 1.11697f, 1.11681f, 1.11692f);
    //    //Add(107, 1.11691f, 1.11696f, 1.11680f, 1.11692f);
    //    //Add(108, 1.11692f, 1.11697f, 1.11676f, 1.11694f);
    //    //Add(109, 1.11694f, 1.11716f, 1.11684f, 1.11708f);
    //    //Add(110, 1.11710f, 1.11715f, 1.11631f, 1.11634f);
    //    //Add(111, 1.11633f, 1.11644f, 1.11603f, 1.11608f);
    //    //Add(112, 1.11607f, 1.11612f, 1.11566f, 1.11596f);
    //    //Add(113, 1.11596f, 1.11598f, 1.11580f, 1.11586f);
    //    //Add(114, 1.11588f, 1.11598f, 1.11572f, 1.11587f);
    //    //Add(115, 1.11588f, 1.11602f, 1.11567f, 1.11567f);
    //    //Add(116, 1.11568f, 1.11588f, 1.11562f, 1.11576f);
    //    //Add(117, 1.11576f, 1.11595f, 1.11534f, 1.11535f);
    //    //Add(118, 1.11536f, 1.11547f, 1.11523f, 1.11541f);
    //    //Add(119, 1.11542f, 1.11549f, 1.11526f, 1.11533f);
    //    //Add(120, 1.11533f, 1.11590f, 1.11522f, 1.11566f);
    //    //Add(121, 1.11566f, 1.11581f, 1.11561f, 1.11572f);
    //    //Add(122, 1.11573f, 1.11604f, 1.11572f, 1.11586f);
    //    //Add(123, 1.11587f, 1.11593f, 1.11550f, 1.11588f);
    //    //Add(124, 1.11588f, 1.11596f, 1.11548f, 1.11562f);
    //    //Add(125, 1.11561f, 1.11605f, 1.11542f, 1.11583f);
    //    //Add(126, 1.11582f, 1.11583f, 1.11548f, 1.11578f);
    //    //Add(127, 1.11578f, 1.11591f, 1.11561f, 1.11565f);
    //    //Add(128, 1.11564f, 1.11574f, 1.11525f, 1.11536f);
    //    //Add(129, 1.11538f, 1.11540f, 1.11520f, 1.11527f);
    //    //Add(130, 1.11526f, 1.11542f, 1.11508f, 1.11534f);
    //    //Add(131, 1.11534f, 1.11535f, 1.11506f, 1.11512f);
    //    //Add(132, 1.11513f, 1.11523f, 1.11500f, 1.11514f);
    //    //Add(133, 1.11514f, 1.11520f, 1.11508f, 1.11512f);
    //    //Add(134, 1.11512f, 1.11513f, 1.11466f, 1.11469f);
    //    //Add(135, 1.11468f, 1.11470f, 1.11436f, 1.11442f);
    //    //Add(136, 1.11442f, 1.11456f, 1.11431f, 1.11455f);
    //    //Add(137, 1.11454f, 1.11475f, 1.11450f, 1.11472f);
    //    //Add(138, 1.11471f, 1.11480f, 1.11447f, 1.11480f);
    //    //Add(139, 1.11480f, 1.11497f, 1.11469f, 1.11490f);
    //    //Add(140, 1.11490f, 1.11490f, 1.11447f, 1.11455f);
    //    //Add(141, 1.11456f, 1.11457f, 1.11418f, 1.11433f);
    //    //Add(142, 1.11432f, 1.11446f, 1.11411f, 1.11412f);
    //    //Add(143, 1.11412f, 1.11418f, 1.11401f, 1.11402f);
    //    //Add(144, 1.11402f, 1.11435f, 1.11400f, 1.11425f);
    //    //Add(145, 1.11428f, 1.11433f, 1.11341f, 1.11348f);
    //    //Add(146, 1.11348f, 1.11358f, 1.11316f, 1.11334f);
    //    //Add(147, 1.11335f, 1.11374f, 1.11329f, 1.11365f);
    //    //Add(148, 1.11366f, 1.11366f, 1.11342f, 1.11360f);
    //    //Add(149, 1.11360f, 1.11363f, 1.11331f, 1.11349f);
    //    //Add(150, 1.11348f, 1.11358f, 1.11336f, 1.11347f);
    //    //Add(151, 1.11347f, 1.11347f, 1.11308f, 1.11314f);
    //    //Add(152, 1.11314f, 1.11340f, 1.11311f, 1.11319f);
    //    //Add(153, 1.11318f, 1.11353f, 1.11311f, 1.11349f);
    //    //Add(154, 1.11350f, 1.11350f, 1.11332f, 1.11342f);
    //    //Add(155, 1.11342f, 1.11368f, 1.11333f, 1.11362f);
    //    //Add(156, 1.11362f, 1.11362f, 1.11318f, 1.11319f);
    //    //Add(157, 1.11320f, 1.11326f, 1.11299f, 1.11312f);
    //    //Add(158, 1.11311f, 1.11318f, 1.11267f, 1.11314f);
    //    //Add(159, 1.11314f, 1.11315f, 1.11279f, 1.11302f);
    //    //Add(160, 1.11302f, 1.11314f, 1.11292f, 1.11298f);
    //    //Add(161, 1.11298f, 1.11313f, 1.11296f, 1.11298f);
    //    //Add(162, 1.11298f, 1.11313f, 1.11272f, 1.11272f);
    //    //Add(163, 1.11272f, 1.11286f, 1.11253f, 1.11272f);
    //    //Add(164, 1.11272f, 1.11280f, 1.11262f, 1.11275f);
    //    //Add(165, 1.11275f, 1.11280f, 1.11250f, 1.11257f);
    //    //Add(166, 1.11258f, 1.11295f, 1.11253f, 1.11289f);
    //    //Add(167, 1.11288f, 1.11301f, 1.11282f, 1.11301f);
    //    //Add(168, 1.11301f, 1.11322f, 1.11293f, 1.11293f);
    //    //Add(169, 1.11293f, 1.11306f, 1.11282f, 1.11304f);
    //    //Add(170, 1.11301f, 1.11315f, 1.11294f, 1.11315f);
    //    //Add(171, 1.11314f, 1.11327f, 1.11314f, 1.11318f);
    //    //Add(172, 1.11319f, 1.11325f, 1.11288f, 1.11293f);
    //    //Add(173, 1.11294f, 1.11304f, 1.11290f, 1.11303f);
    //    //Add(174, 1.11302f, 1.11354f, 1.11298f, 1.11350f);
    //    //Add(175, 1.11348f, 1.11380f, 1.11342f, 1.11379f);
    //    //Add(176, 1.11380f, 1.11406f, 1.11367f, 1.11404f);
    //    //Add(177, 1.11403f, 1.11427f, 1.11389f, 1.11394f);
    //    //Add(178, 1.11394f, 1.11397f, 1.11362f, 1.11395f);
    //    //Add(179, 1.11394f, 1.11402f, 1.11382f, 1.11392f);
    //    //Add(180, 1.11393f, 1.11438f, 1.11376f, 1.11410f);
    //    //Add(181, 1.11410f, 1.11440f, 1.11401f, 1.11438f);
    //    //Add(182, 1.11437f, 1.11476f, 1.11436f, 1.11467f);
    //    //Add(183, 1.11466f, 1.11474f, 1.11456f, 1.11474f);
    //    //Add(184, 1.11476f, 1.11489f, 1.11453f, 1.11464f);
    //    //Add(185, 1.11465f, 1.11469f, 1.11454f, 1.11458f);
    //    //Add(186, 1.11459f, 1.11469f, 1.11443f, 1.11468f);
    //    //Add(187, 1.11468f, 1.11479f, 1.11453f, 1.11478f);
    //    //Add(188, 1.11478f, 1.11479f, 1.11464f, 1.11466f);
    //    //Add(189, 1.11466f, 1.11467f, 1.11410f, 1.11420f);
    //    //Add(190, 1.11420f, 1.11425f, 1.11377f, 1.11377f);
    //    //Add(191, 1.11378f, 1.11400f, 1.11373f, 1.11381f);
    //    //Add(192, 1.11381f, 1.11388f, 1.11354f, 1.11386f);
    //    //Add(193, 1.11388f, 1.11435f, 1.11386f, 1.11420f);
    //    //Add(194, 1.11419f, 1.11433f, 1.11408f, 1.11412f);
    //    //Add(195, 1.11412f, 1.11440f, 1.11412f, 1.11440f);
    //    //Add(196, 1.11442f, 1.11492f, 1.11442f, 1.11484f);
    //    //Add(197, 1.11484f, 1.11484f, 1.11444f, 1.11465f);
    //    //Add(198, 1.11466f, 1.11500f, 1.11462f, 1.11499f);
    //    //Add(199, 1.11500f, 1.11501f, 1.11487f, 1.11488f);
    //    //Add(200, 1.11488f, 1.11528f, 1.11488f, 1.11516f);
    //    //Add(201, 1.11515f, 1.11542f, 1.11506f, 1.11518f);
    //    //Add(202, 1.11518f, 1.11539f, 1.11506f, 1.11510f);
    //    //Add(203, 1.11508f, 1.11538f, 1.11496f, 1.11526f);
    //    //Add(204, 1.11528f, 1.11672f, 1.11528f, 1.11562f);
    //    //Add(205, 1.11561f, 1.11603f, 1.11537f, 1.11585f);
    //    //Add(206, 1.11586f, 1.11623f, 1.11580f, 1.11617f);
    //    //Add(207, 1.11614f, 1.11668f, 1.11592f, 1.11652f);
    //    //Add(208, 1.11652f, 1.11664f, 1.11620f, 1.11622f);
    //    //Add(209, 1.11622f, 1.11652f, 1.11621f, 1.11631f);
    //    //Add(210, 1.11632f, 1.11636f, 1.11602f, 1.11602f);
    //    //Add(211, 1.11602f, 1.11632f, 1.11580f, 1.11632f);
    //    //Add(212, 1.11632f, 1.11651f, 1.11628f, 1.11632f);
    //    //Add(213, 1.11632f, 1.11632f, 1.11593f, 1.11596f);
    //    //Add(214, 1.11595f, 1.11658f, 1.11561f, 1.11645f);
    //    //Add(215, 1.11645f, 1.11675f, 1.11632f, 1.11634f);
    //    //Add(216, 1.11635f, 1.11659f, 1.11626f, 1.11638f);
    //    //Add(217, 1.11638f, 1.11651f, 1.11628f, 1.11650f);
    //    //Add(218, 1.11650f, 1.11685f, 1.11633f, 1.11682f);
    //    //Add(219, 1.11680f, 1.11707f, 1.11678f, 1.11704f);
    //    //Add(220, 1.11704f, 1.11719f, 1.11681f, 1.11688f);
    //    //Add(221, 1.11689f, 1.11745f, 1.11686f, 1.11738f);
    //    //Add(222, 1.11736f, 1.11799f, 1.11731f, 1.11790f);
    //    //Add(223, 1.11788f, 1.11799f, 1.11778f, 1.11782f);
    //    //Add(224, 1.11783f, 1.11790f, 1.11732f, 1.11738f);
    //    //Add(225, 1.11738f, 1.11742f, 1.11714f, 1.11736f);
    //    //Add(226, 1.11736f, 1.11753f, 1.11715f, 1.11753f);
    //    //Add(227, 1.11752f, 1.11752f, 1.11712f, 1.11720f);
    //    //Add(228, 1.11721f, 1.11741f, 1.11720f, 1.11738f);
    //    //Add(229, 1.11738f, 1.11740f, 1.11715f, 1.11728f);
    //    //Add(230, 1.11728f, 1.11734f, 1.11712f, 1.11728f);
    //    //Add(231, 1.11730f, 1.11738f, 1.11715f, 1.11721f);
    //    //Add(232, 1.11722f, 1.11737f, 1.11710f, 1.11711f);
    //    //Add(233, 1.11712f, 1.11728f, 1.11709f, 1.11728f);
    //    //Add(234, 1.11727f, 1.11728f, 1.11696f, 1.11702f);
    //    //Add(235, 1.11702f, 1.11711f, 1.11688f, 1.11694f);
    //    //Add(236, 1.11694f, 1.11723f, 1.11680f, 1.11713f);
    //    //Add(237, 1.11714f, 1.11722f, 1.11712f, 1.11712f);
    //    //Add(238, 1.11711f, 1.11736f, 1.11711f, 1.11715f);
    //    //Add(239, 1.11716f, 1.11727f, 1.11708f, 1.11722f);
    //    //Add(240, 1.11722f, 1.11723f, 1.11706f, 1.11708f);
    //    //Add(241, 1.11708f, 1.11733f, 1.11706f, 1.11726f);
    //    //Add(242, 1.11727f, 1.11732f, 1.11722f, 1.11726f);
    //    //Add(243, 1.11726f, 1.11728f, 1.11717f, 1.11718f);
    //    //Add(244, 1.11717f, 1.11728f, 1.11701f, 1.11702f);
    //    //Add(245, 1.11701f, 1.11712f, 1.11698f, 1.11702f);
    //    //Add(246, 1.11702f, 1.11702f, 1.11679f, 1.11690f);
    //    //Add(247, 1.11691f, 1.11718f, 1.11676f, 1.11678f);
    //    //Add(248, 1.11676f, 1.11689f, 1.11663f, 1.11684f);
    //    //Add(249, 1.11684f, 1.11692f, 1.11671f, 1.11678f);
    //    //Add(250, 1.11676f, 1.11693f, 1.11672f, 1.11683f);
    //    //Add(251, 1.11682f, 1.11688f, 1.11661f, 1.11670f);
    //    //Add(252, 1.11669f, 1.11682f, 1.11647f, 1.11650f);
    //    //Add(253, 1.11652f, 1.11663f, 1.11641f, 1.11642f);
    //    //Add(254, 1.11641f, 1.11668f, 1.11641f, 1.11667f);
    //    //Add(255, 1.11666f, 1.11668f, 1.11641f, 1.11646f);
    //    //Add(256, 1.11645f, 1.11647f, 1.11613f, 1.11634f);
    //    //Add(257, 1.11634f, 1.11640f, 1.11621f, 1.11630f);
    //    //Add(258, 1.11630f, 1.11634f, 1.11616f, 1.11630f);
    //    //Add(259, 1.11629f, 1.11636f, 1.11619f, 1.11622f);
    //    //Add(260, 1.11622f, 1.11639f, 1.11620f, 1.11627f);
    //    //Add(261, 1.11627f, 1.11636f, 1.11624f, 1.11635f);
    //    //Add(262, 1.11635f, 1.11647f, 1.11625f, 1.11646f);
    //    //Add(263, 1.11646f, 1.11678f, 1.11645f, 1.11675f);
    //    //Add(264, 1.11674f, 1.11676f, 1.11650f, 1.11653f);
    //    //Add(265, 1.11654f, 1.11660f, 1.11649f, 1.11655f);
    //    //Add(266, 1.11656f, 1.11656f, 1.11630f, 1.11636f);
    //    //Add(267, 1.11636f, 1.11645f, 1.11631f, 1.11632f);
    //    //Add(268, 1.11630f, 1.11631f, 1.11624f, 1.11625f);
    //    //Add(269, 1.11626f, 1.11626f, 1.11617f, 1.11620f);
    //    //Add(270, 1.11618f, 1.11620f, 1.11609f, 1.11610f);
    //    //Add(271, 1.11609f, 1.11612f, 1.11604f, 1.11606f);
    //    //Add(272, 1.11608f, 1.11617f, 1.11606f, 1.11614f);
    //    //Add(273, 1.11614f, 1.11614f, 1.11607f, 1.11612f);
    //    //Add(274, 1.11612f, 1.11614f, 1.11601f, 1.11603f);
    //    //Add(275, 1.11602f, 1.11617f, 1.11601f, 1.11617f);
    //    //Add(276, 1.11615f, 1.11620f, 1.11611f, 1.11617f);
    //    //Add(277, 1.11618f, 1.11620f, 1.11588f, 1.11594f);
    //    //Add(278, 1.11596f, 1.11596f, 1.11581f, 1.11584f);
    //    //Add(279, 1.11584f, 1.11591f, 1.11579f, 1.11581f);
    //    //Add(280, 1.11581f, 1.11593f, 1.11581f, 1.11590f);
    //    //Add(281, 1.11590f, 1.11601f, 1.11590f, 1.11601f);
    //    //Add(282, 1.11600f, 1.11602f, 1.11597f, 1.11600f);
    //    //Add(283, 1.11601f, 1.11601f, 1.11590f, 1.11592f);
    //    //Add(284, 1.11593f, 1.11596f, 1.11575f, 1.11576f);
    //    //Add(285, 1.11576f, 1.11577f, 1.11568f, 1.11576f);
    //    //Add(286, 1.11577f, 1.11584f, 1.11526f, 1.11559f);

    //    return candles;
    //}

    //////////////////////////

    //public static (TickSet Ticks, IntervalFeed Feed) GetTickSetAndFeed(int seconds)
    //{
    //    var pair = Known.Pairs[Symbol.EURUSD];

    //    var baseDate = new DateOnly(2020, 1, 2);

    //    var session = new Session(Extent.EstDay, baseDate);

    //    var tickSet = new TickSet(Source.Dukascopy, pair, baseDate);

    //    tickSet.LoadFromStream(
    //        DC_EURUSD_20200102_EST_STS.ToStream(), SaveAs.STS);

    //    return (tickSet, new IntervalFeed(pair, session, seconds));
    //}
}
